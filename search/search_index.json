{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>This is the documentation for Low-Ops platform. Here you will find information about how to use the platform. It describes the platform's architecture and how to use it as a developer and as an operator.</p>"},{"location":"#internal-developer-platform","title":"Internal Developer Platform","text":"<p>Low-Ops is a platform for running applications in a cloud environment. It is designed to be easy to use and to require minimal maintenance. At its core, it is a Kubernetes cluster with a set of tools to make it easy to deploy and manage applications. It is designed to be used by developers and operators with minimal knowledge of Kubernetes and cloud infrastructure. You will be able to do all your tasks through the Low-Ops Portal supported with best practices of delivering applications to your business and customers.</p>"},{"location":"#focus-on-value-delivery-not-re-inventing-the-wheel","title":"Focus on value delivery. Not re-inventing the wheel.","text":"<p>Without Low-Ops, an organization would need to hire a team of DevOps-, Cloud engineers and Platform engineers to build and maintain a platform for running applications. This is a costly and time-consuming process. Low-Ops solves this problem by providing a platform that is easy to use and requires minimal maintenance. This allows organizations to focus on their core business and deliver value to their customers.</p>"},{"location":"#key-features","title":"Key features","text":"<ul> <li>Easy to use - Low-Ops is designed to be easy to use. It is designed to be used by developers and operators with minimal knowledge of Kubernetes and cloud infrastructure. You will be able to do all your tasks through the Low-Ops Portal.</li> <li>Self-service - Low-Ops is designed to be self-service. This means that developers and operators can do all their tasks without having to contact a platform team.</li> <li>Self-healing - Low-Ops is designed to be self-healing. This means that if something goes wrong, the platform will automatically fix itself.</li> <li>Highly available - Low-Ops is designed to be highly available. This means that if something goes wrong, the platform will automatically recover from the failure.</li> <li>Cost-effective - Low-Ops is designed to be cost-effective. This means that it is designed to be cheap to run and maintain.</li> <li>Secure - Low-Ops is designed to be secure. This means that it is designed to be secure by default. With fine-grained permission access, users can only access what they need to do their job.</li> <li>Scalable - Low-Ops is designed to be scalable. This means that it is designed to be able to scale up and down as needed.</li> <li>Upgradable - Low-Ops is designed to be upgradable. This means that it is designed to be able to upgrade to new versions of Kubernetes and other components without downtime.</li> </ul> <p>Jump to Getting Started to learn how to use Low-Ops. Or checkout out our Architecture to learn how Low-Ops works.</p>"},{"location":"architecture/","title":"Architecture","text":"<p>Low-Ops is made up of a set of components that work together to provide a platform for running applications. </p>"},{"location":"architecture/#overview","title":"Overview","text":"<p>There are 3 main layers in Low-Ops architecture:</p> <ol> <li>Applications - Custom-built applications that run on Low-Ops.</li> <li>Platform - The platform that runs the applications. It also provides a diverse set of services that are used by the applications or enables developers to build, deliver, and own their applications end-to-end.</li> <li>Foundation - The foundation that the platform runs on. This is the cloud provider or on-premise datacenter that provides a cloud-agnostic foundation which must be a Kubernetes cluster.</li> </ol> <pre><code>    C4Context\n      title Low-Ops\n      System_Boundary(Enterprise, \"Enterprise\") {\n        Person(Developer, \"develops and deploys applications\")\n        Person(Operator, \"Manages the platform\")\n        Person(EndUser, \"Uses business or consumer applications\")\n\n        System(EnterpriseIDP, \"Enterprise Identity Provider\")\n\n        System_Boundary(Apps, \"Applications\") {\n            System(AppMendix, \"Mendix App\")\n            System(AppNextJS, \"NextJS App\")\n            System(AppDjango, \"Django App\")\n            System(AppPHP, \"PHP App\")\n        }\n\n        System_Boundary(Platform, \"Platform\") {\n            UpdateLayoutConfig($c4ShapeInRow=\"3\", $c4BoundaryInRow=\"1\")\n            System_Boundary(CoreServices, \"Core Services\") {\n                System(Registry, \"Container Registry\")\n                System(Ingress, \"Ingress\")\n                System(IDP, \"Identity Provider\")\n                System(Database, \"Core Database Service\")\n                System(Observability, \"Observability\")\n            }\n            System_Boundary(DevOpsServices, \"DevOps Services\") {\n                System(Portal, \"Portal\")\n                System(Pipelines, \"Pipelines\")\n                System(SCM, \"Source Code Management\")\n            }\n            System_Boundary(DataServices, \"Data Services\") {\n                System(SharedDatabase, \"Shared Database Service\")\n                System(SharedObjectStorage, \"Shared Object Storage Service\")\n            }\n        }\n\n        System_Boundary(Foundation, \"Foundation\") {\n            System(aws, \"Amazon Web Services\")\n            System(GCP, \"Google Cloud Platform\")\n            System(Azure, \"Azure Cloud Platform\")\n            System(OpenShift, \"OpenShift\")\n            System(K8s, \"Any Kubernetes compatible platform\")\n        }\n      }\n\n      Rel(Developer, Portal, \"uses\")\n      Rel(Operator, Portal, \"uses\")\n      Rel(EndUser, AppMendix, \"uses\")\n      Rel(EndUser, AppPHP, \"uses\")\n      Rel(EndUser, AppDjango, \"uses\")\n      Rel(EndUser, AppNextJS, \"uses\")\n      Rel(IDP, EnterpriseIDP, \"Delegate authentication\")\n      UpdateLayoutConfig($c4ShapeInRow=\"3\", $c4BoundaryInRow=\"1\")</code></pre>"},{"location":"architecture/#philosophy","title":"Philosophy","text":"<p>Deploying components onto Kubernetes is not rocket science. However, having the platform to be reproducible, scalable, and maintainable is a challenge. Low-Ops is designed to be easy to use and requires minimal maintenance. It is designed to be used by developers and operators with minimal knowledge of Kubernetes and cloud infrastructure. You will be able to do all your tasks through the Low-Ops Portal supported with best practices of delivering applications to your business and customers.</p> <p>Because the whole platform is fully automated and runs on your infrastructure, you have 100% control over your data and can be sure that it is secure. You can also easily integrate it with your existing systems and processes.</p> <p>Don't want or need upgradability of Low-Ops? You can modify it to fit your needs. You can also use it as a starting point for your own platform.</p>"},{"location":"getting-started/advanced-configuration/","title":"Advanced configuration","text":""},{"location":"getting-started/advanced-configuration/#add-lowops-repository","title":"Add LowOps Repository","text":"<pre><code>helm repo add --username $PAT_NAME --password $PAT_TOKEN lowops \\\n    \"https://gitlab.com/api/v4/projects/41532268/packages/helm/stable\"\nhelm repo update\n</code></pre>"},{"location":"getting-started/advanced-configuration/#custom-values","title":"Custom Values","text":"<p>To view the available values, run the command: <pre><code>helm show values lowops/lowops\n</code></pre></p>"},{"location":"getting-started/advanced-configuration/#image-parameters","title":"Image Parameters","text":"Name Description Default Value lowops.image.containerImage LowOps platform deploy image name. Request from <code>CINAQ Team</code> \"\""},{"location":"getting-started/advanced-configuration/#common-parameters","title":"Common Parameters","text":"Name Description Default Value lowops.config.common.base_domain LowOps platform base domain. Example: <code>example.low-ops.com</code> \"ci.cinaq.com\" lowops.config.common.private_registry_url LowOps platform private container registry url \"registry.gitlab.com\" lowops.config.common.platform_private_registry_user LowOps platform private container registry user. \"lowops-user\" lowops.config.common.platform_private_registry_token LowOps platform private container registry token. Request from <code>CINAQ Team</code> \"\" lowops.config.common.platform_state LowOps platform state. Options: <code>present</code> - will run platform install or upgrade, <code>absent</code> - will destroy all platform components. \"present\" lowops.config.common.foundation_type LowOps platform foundation type. Options <code>generic</code>, <code>aws</code> - must be set if running on AWS EKS. \"generic\" lowops.config.common.aws_default_region LowOps platform AWS Default region. When <code>common.foundation_type</code> is set to <code>aws</code> \"eu-central-1\" lowops.config.common.email_domain LowOps platform email domain. Example: <code>Google workspace domain</code> \"cinaq.com\" lowops.config.common.general_client_name LowOps platform general client name \"CINAQ\" lowops.config.common.shared_db_type LowOps platform shared database type for running applications. Options: <code>platform_pg</code>, <code>platform_cnpg</code>, <code>rds_mysql</code>, <code>rds_postgres</code> \"platform_cnpg\" lowops.config.common.low_ops_env LowOps platform environment name. You can use any string except reserved values: <code>ci</code>, <code>trial</code>. Example <code>prod</code>, <code>stage</code> \"dev\" lowops.config.common.platform_version LowOps platform version. Example: <code>v2.0.0.</code> \"\" lowops.config.common.mendix_license_id LowOps platform mendix license ID \"\" lowops.config.common.mendix_license_key LowOps platform mendix license key \"\""},{"location":"getting-started/advanced-configuration/#ingress-parameters","title":"Ingress Parameters","text":"<p>When <code>foundation_type</code> is set to <code>aws</code>, the ELB (Elastic Load Balancer) is managed through the Ingress Controller platform component. To configure the load balancer to use static IP adresses (typically, you need 2 for a production environment in 2 different subnets/azs, which could be usefull for DNS configuration) update the <code>lowops.config.ingress.aws_elb_eipalloc</code> helm values variable as a comma-separated string of AWS EIP allocations IDs.</p> Name Description Default Value lowops.config.ingress.default_ssl_cert LowOps platform ssl certificate. Base64 encoded string \"\" lowops.config.ingress.default_ssl_key LowOps platform ssl key. Base64 encoded string \"\" lowops.config.ingress.aws_elb_eipalloc LowOps platform aws elb allocation. CSV of aws ip allocations. When <code>common.foundation_type</code> is set to <code>aws</code> \"\""},{"location":"getting-started/advanced-configuration/#s3-apps-services-gateway-parameters","title":"S3 Apps Services Gateway Parameters","text":"<p>When running with <code>foundation_type</code> == <code>aws</code>, change s3 gateway values to AWS API Access and Secret keys with access to the S3 applications bucket (Refer to the diagram above). In <code>generic</code> type, will point to Minio service inside platform.</p> Name Description Default Value lowops.config.s3_gateway.apps_root_user LowOps platform s3 gateway user name to access apps storage buckets \"\" lowops.config.s3_gateway.apps_root_password LowOps platform s3 gateway user password to access apps storage buckets \"\""},{"location":"getting-started/advanced-configuration/#s3-core-services-parameters","title":"S3 Core Services Parameters","text":"<p>When running with <code>foundation_type</code> == <code>aws</code>, change s3 gateway values to AWS API Access and Secret keys with access to the S3 core services bucket (Refer to the diagram above). In <code>generic</code> type, will point to Minio service inside platform.</p> Name Description Default Value lowops.config.s3_gateway.core_root_user_set LowOps platform s3 gateway user name to access core storage buckets \"\" lowops.config.s3_gateway.core_root_password LowOps platform s3 gateway user password to access core storage buckets \"\""},{"location":"getting-started/installation/","title":"Low Ops Platform setup","text":""},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":""},{"location":"getting-started/installation/#required-packages","title":"Required packages","text":"<p>The following binaries must be present on the machine with access to Kubernetes api before starting:</p> <ul> <li>kubectl - <code>v1.27</code></li> <li>helm - <code>v3.9</code></li> </ul>"},{"location":"getting-started/installation/#kubernetes","title":"Kubernetes","text":"<p>LowOps platform requires a Kubernetes cluster.</p> <p>Curently supported versions are:</p> <ul> <li><code>1.27</code></li> </ul>"},{"location":"getting-started/installation/#resources","title":"Resources","text":"<p>To run the platform you'll need at least 16 GB RAM and 8 core CPU.</p>"},{"location":"getting-started/installation/#platform-foundation","title":"Platform Foundation","text":"<p>The platform foundation is an infrastructure level that has to provide a scalable, flexeble and extensible enviromnemt for the platform lifecycle. To build the platform foundation, you can use cloud providers or on-premise solutions that allow you to run managed or self-managed Kubernetes (k8s) clusters.</p> <p>There are 2 different platform <code>foundation_type</code>s:</p> <ul> <li> <p><code>generic</code> - Default platform installation method supports any Kubernetes custom or managed solution. All platform components required to run future applications workloads will be installed automatically.</p> </li> <li> <p><code>aws</code> - Optimised platform installation for AWS-specific services natively supports other <code>AWS</code> services such as EKS, RDS, S3, ELB, EBS. To use AWS-managed data resources, you need to create them before platform installation as part of the foundation setup. Refer to the diagram bellow for more details.</p> </li> </ul> <p>High level AWS diagram:</p> <p></p>"},{"location":"getting-started/installation/#platform-configuration","title":"Platform Configuration","text":"<p>Before starting the platform installation process, check the configuration options below. Change required paramaters to match your environment setup.</p> <p>Create values file <code>values.yaml</code> with following parameters:</p> <p><code>For more advanced configuration and options descriptions follow this [page](./advanced-configuration.md)</code></p> <pre><code>lowops:\n  image:\n    containerImage: registry.gitlab.com/cinaq/low-ops-platform/ansible-roles:0-ci-v2-0-0\n\n  # LowOps platfrom configuration variables\n  config:\n    common:\n      base_domain: ci.cinaq.com\n      platform_state: present\n      foundation_type: generic\n      email_domain: cinaq.com\n      general_client_name: CINAQ\n      platform_version: v2.0.0\n  # Set lowops custom images tags to the same version\n      rootfs_app_image_tag: 0-ci-v2-0-0\n      rootfs_builder_image_tag: 0-ci-v2-0-0\n      toolkit_image_tag: 0-ci-v2-0-0\n      s3_gateway_image_tag: 0-ci-v2-0-0\n      oauth2proxy_image_tag: 0-ci-v2-0-0\n      keycloak_image_tag: 0-ci-v2-0-0\n    ingress:\n  # Update certificate and key params values to base64 encoded strings \n      default_ssl_cert: base64-encoded-cert-string\n      default_ssl_key: base64-encoded-key-string\n</code></pre>"},{"location":"getting-started/installation/#platform-installation","title":"Platform Installation","text":""},{"location":"getting-started/installation/#configure-namespace","title":"Configure Namespace","text":"<p>Run script below to create deployment job namespace. Add pull secret to the namespace. </p> <pre><code>NAMESPACE=lowops-devops\nkubectl create namespace \"$NAMESPACE\"\n\nUPSTREAM_REGISTRY=\"registry.gitlab.com\"\nUPSTREAM_REGISTRY_USER=\"registry-user\" # change with your resgitry user\nUPSTREAM_REGISTRY_TOKEN=\"registry-token\" # change with your registry password\nUPSTREAM_REGISTRY_AUTH=$(echo -n \"$UPSTREAM_REGISTRY_USER:$UPSTREAM_REGISTRY_TOKEN\" | base64)\n\nmkdir -p /tmp/lowops-docker-config\necho \"\n{\n    \\\"auths\\\": {\n        \\\"$UPSTREAM_REGISTRY\\\": {\\\"auth\\\": \\\"$UPSTREAM_REGISTRY_AUTH\\\"}\n    }\n}\n\" &gt; /tmp/lowops-docker-config/config.json\n\n# ensure lowops-registry secret exists\nkubectl -n \"$NAMESPACE\" create secret generic lowops-registry --from-file=.dockerconfigjson=/tmp/lowops-docker-config/config.json --type=kubernetes.io/dockerconfigjson\n</code></pre>"},{"location":"getting-started/installation/#install-metallb","title":"Install metallb","text":"<pre><code>**Note:** This step is not needed for managed k8s solutions.\n</code></pre> <p>Add bitnami helm repo</p> <pre><code>helm repo add \"bitnami\" \"https://charts.bitnami.com/bitnami\"\nhelm repo update\n</code></pre> <p>Install metallb chart</p> <pre><code># Network pool must be accesseble from cluster.\nSTART_NETWORK=172.20.255.200\nEND_NETWORK=172.20.255.250\nhelm upgrade -i -n metallb --create-namespace metallb bitnami/metallb \\\n    --version 3.0.12 \\\n    --set \"configInline.address-pools[0].name=default\" \\\n    --set \"configInline.address-pools[0].protocol=layer2\" \\\n    --set \"configInline.address-pools[0].addresses[0]=${START_NETWORK}-${END_NETWORK}\" \\\n    --set \"speaker.secretValue=stronk-key\"\n</code></pre>"},{"location":"getting-started/installation/#install-platform","title":"Install Platform","text":"<p>From the deploy server with access to the Kubernetes cluster API. Install the platform by installing <code>lowops</code> helm chart.</p> <p>Add lowops helm repository.</p> <pre><code>helm repo add --username $UPSTREAM_REGISTRY_USER --password $UPSTREAM_REGISTRY_TOKEN lowops \\\n    \"https://gitlab.com/api/v4/projects/41532268/packages/helm/stable\"\n\nhelm repo update\n</code></pre> <p>Run <code>helm install</code> command to start the platform setup process.</p> <pre><code>NAMESPACE=lowops-devops\nCHART_VALUES_FILE=values.yaml\nCHART_VERSION=0.1.70\nHELM_CMD=\"helm upgrade -i lowops-platform lowops/lowops -n $NAMESPACE\"\nif [ -f \"$CHART_VALUES_FILE\" ]; then\n    HELM_CMD=\"$HELM_CMD -f $CHART_VALUES_FILE\"\nfi\nif [ -n \"$CHART_VERSION\" ]; then\n    HELM_CMD=\"$HELM_CMD --version=$CHART_VERSION\"\nfi\necho \"$HELM_CMD\"\neval \"$HELM_CMD\"\n</code></pre> <p>After deploy job started you can get installation log</p> <pre><code>kubectl logs -n lowops-devops --timestamps=true job/lowops-platform -f\n</code></pre> <p>After deploy finished successfully start with exploring LowOps platform portal. In browser access https://portal.ci.cinaq.com (where <code>ci.cinaq.com</code> is your base domain.)</p>"},{"location":"how-to/onboard-new-application/","title":"Onboard a new application","text":""},{"location":"references/application-types/","title":"Application Types","text":""}]}